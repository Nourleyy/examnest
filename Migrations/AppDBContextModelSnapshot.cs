// <auto-generated />
using System;
using ExamNest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamNest.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamNest.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BranchId")
                        .HasName("PK__Branches__A1682FA5045664C5");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ExamNest.Models.Choice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChoiceId"));

                    b.Property<string>("ChoiceLetter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("ChoiceText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.HasKey("ChoiceId")
                        .HasName("PK__Choices__76F51686D378E142");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("ExamNest.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D7187C9EE3165");

                    b.HasIndex("TrackId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ExamNest.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExamDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ExamId")
                        .HasName("PK__Exams__297521A763757D2B");

                    b.HasIndex("CourseId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamNest.Models.ExamSubmission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubmissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SubmissionId")
                        .HasName("PK__ExamSubm__449EE1050DC14916");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamSubmissions");
                });

            modelBuilder.Entity("ExamNest.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("InstructorId")
                        .HasName("PK__Instruct__9D010B7BF1B63A8F");

                    b.HasIndex("BranchId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("ExamNest.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Permissi__3213E83F98131AD6");

                    b.HasIndex(new[] { "Name" }, "UQ__Permissi__72E12F1B4B9C5D27")
                        .IsUnique();

                    b.ToTable("Permissions", "Auth");
                });

            modelBuilder.Entity("ExamNest.Models.QuestionBank", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("ModelAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06F8C9ED11DA9");

                    b.HasIndex("CourseId");

                    b.ToTable("QuestionBank", (string)null);
                });

            modelBuilder.Entity("ExamNest.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3213E83FF97406C0");

                    b.HasIndex(new[] { "Name" }, "UQ__Roles__72E12F1B9C496B68")
                        .IsUnique();

                    b.ToTable("Roles", "Auth");
                });

            modelBuilder.Entity("ExamNest.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("session_token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Sessions__3213E83FE960D0F3");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SessionToken" }, "UQ__Sessions__E598F5C881DE4E17")
                        .IsUnique();

                    b.ToTable("Sessions", "Auth");
                });

            modelBuilder.Entity("ExamNest.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("StudentId")
                        .HasName("PK__Students__32C52A79237365D1");

                    b.HasIndex("BranchId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ExamNest.Models.StudentAnswer", b =>
                {
                    b.Property<int>("SubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("SubmissionID");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("StudentAnswer1")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("StudentAnswer")
                        .IsFixedLength();

                    b.HasKey("SubmissionId", "QuestionId")
                        .HasName("PK__StudentA__9442E7FDD5A44EAB");

                    b.HasIndex("QuestionId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("ExamNest.Models.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TrackId")
                        .HasName("PK__Tracks__7A74F8C00AD9D715");

                    b.HasIndex("BranchId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("ExamNest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("instructor_id");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_id");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Guest")
                        .HasColumnName("role");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("PK__Users__3213E83F1AED758A");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164B3034577")
                        .IsUnique();

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.HasKey("ExamId", "QuestionId")
                        .HasName("PK__ExamQues__F9A9275F2895A4B0");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions", (string)null);
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PK__RolePerm__C85A54630F43173E");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "Auth");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__6EDEA153BE007F51");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Auth");
                });

            modelBuilder.Entity("ExamNest.Models.Choice", b =>
                {
                    b.HasOne("ExamNest.Models.QuestionBank", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__Choices__Questio__4AB81AF0");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamNest.Models.Course", b =>
                {
                    b.HasOne("ExamNest.Models.Track", "Track")
                        .WithMany("Courses")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Courses__TrackID__3C69FB99");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("ExamNest.Models.Exam", b =>
                {
                    b.HasOne("ExamNest.Models.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Exams__CourseID__4E88ABD4");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ExamNest.Models.ExamSubmission", b =>
                {
                    b.HasOne("ExamNest.Models.Exam", "Exam")
                        .WithMany("ExamSubmissions")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK__ExamSubmi__ExamI__5629CD9C");

                    b.HasOne("ExamNest.Models.Student", "Student")
                        .WithMany("ExamSubmissions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__ExamSubmi__Stude__571DF1D5");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamNest.Models.Instructor", b =>
                {
                    b.HasOne("ExamNest.Models.Branch", "Branch")
                        .WithMany("Instructors")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Instructo__Branc__3F466844");

                    b.HasOne("ExamNest.Models.Track", "Track")
                        .WithMany("Instructors")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Instructo__Track__403A8C7D");

                    b.HasOne("ExamNest.Models.User", "User")
                        .WithMany("Instructors")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Instructors_Users");

                    b.Navigation("Branch");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamNest.Models.QuestionBank", b =>
                {
                    b.HasOne("ExamNest.Models.Course", "Course")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__QuestionB__Cours__47DBAE45");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ExamNest.Models.Session", b =>
                {
                    b.HasOne("ExamNest.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Sessions__user_i__2A164134");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamNest.Models.Student", b =>
                {
                    b.HasOne("ExamNest.Models.Branch", "Branch")
                        .WithMany("Students")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Students__Branch__4316F928");

                    b.HasOne("ExamNest.Models.Track", "Track")
                        .WithMany("Students")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Students__TrackI__440B1D61");

                    b.HasOne("ExamNest.Models.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Users");

                    b.Navigation("Branch");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamNest.Models.StudentAnswer", b =>
                {
                    b.HasOne("ExamNest.Models.QuestionBank", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentAn__Quest__5AEE82B9");

                    b.HasOne("ExamNest.Models.ExamSubmission", "Submission")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentAn__Submi__59FA5E80");

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("ExamNest.Models.Track", b =>
                {
                    b.HasOne("ExamNest.Models.Branch", "Branch")
                        .WithMany("Tracks")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Tracks__BranchID__398D8EEE");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.HasOne("ExamNest.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK__ExamQuest__ExamI__5165187F");

                    b.HasOne("ExamNest.Models.QuestionBank", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__ExamQuest__Quest__52593CB8");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("ExamNest.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__permi__37703C52");

                    b.HasOne("ExamNest.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__role___367C1819");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("ExamNest.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__role___339FAB6E");

                    b.HasOne("ExamNest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__user___32AB8735");
                });

            modelBuilder.Entity("ExamNest.Models.Branch", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("ExamNest.Models.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("ExamNest.Models.Exam", b =>
                {
                    b.Navigation("ExamSubmissions");
                });

            modelBuilder.Entity("ExamNest.Models.ExamSubmission", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ExamNest.Models.QuestionBank", b =>
                {
                    b.Navigation("Choices");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ExamNest.Models.Student", b =>
                {
                    b.Navigation("ExamSubmissions");
                });

            modelBuilder.Entity("ExamNest.Models.Track", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ExamNest.Models.User", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Sessions");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
